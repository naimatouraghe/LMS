name: Continuous Integration

on:
  push:
    branches: [master, develop, "feature/**", "hotfix/**"]
  pull_request:
    branches: [master, develop]

env:
  DOTNET_VERSION: "8.0.x"
  NODE_VERSION: "18.x"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Cache pour .NET
      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      # Cache pour Node
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build .NET
        run: dotnet build LMSAPP.Server/lmsapp.Server.csproj --configuration Release

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build React
        working-directory: ./lmsapp.client
        run: |
          npm ci
          npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run .NET Tests
        run: dotnet test LMSAPP.Server/lmsapp.Server.csproj --configuration Release || true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run React Tests
        working-directory: ./lmsapp.client
        run: |
          npm ci
          npm test || true

  quality:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Test with coverage
        run: dotnet test LMSAPP.Server/lmsapp.Server.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=naimatouraghe_LMS
            -Dsonar.organization=naimatouraghe
            -Dsonar.sources=.
            -Dsonar.exclusions=**/obj/**,**/bin/**,**/dist/**,**/node_modules/**
            -Dsonar.cs.opencover.reportsPaths=**/coverage.opencover.xml
            -Dsonar.javascript.lcov.reportPaths=**/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/*.test.ts,**/*.spec.ts
            -Dsonar.branch.autoconfig.disabled=false
            -Dsonar.branch.target=master
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Run ESLint
        working-directory: ./lmsapp.client
        run: |
          npm ci
          npm run lint

  package:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build et Push Backend
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./LMSAPP.Server
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lmsapp-backend:latest

      # Build et Push Frontend
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./lmsapp.client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lmsapp-frontend:latest

      # Create GitHub Release
      - name: Create Release
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
